{"version":3,"sources":["components/InfoBox.js","components/util.js","components/Map.js","components/Table.js","components/LineGraph.js","App.js","components/reportWebVitals.js","index.js"],"names":["InfoBox","title","isRed","isGrey","active","cases","total","props","Card","onClick","className","CardContent","Typography","color","isloading","casesTypeColors","hex","mulitiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","ChangeView","useMap","setView","MapContainer","scrollWheelZoom","TileLayer","attribution","url","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","setZoom","mapCountries","setMapCountries","setCasesType","isLoading","setLoading","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1084bce1.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, isRed, isGrey, active, cases, total, ...props }) {\n    return (\n    <Card\n        onClick={props.onClick}\n        className={`infoBox ${active && \"infoBox--selected\"} ${\n            isRed && \"infoBox--red\"\n        } ${isGrey && \"infoBox--grey\"}`}\n    >\n        {/* Title */}\n        <CardContent>\n            <Typography className=\"infoBox__title\" color=\"textSecondary\">\n                {title}\n            </Typography>\n\n        {/* Number of Cases */}\n            <h2\n                className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"} ${\n                isGrey && \"infoBox__cases--grey\"\n                }`}\n            >\n                {props.isloading ? <i className=\"fa fa-cog fa-spin fa-fw\" /> : cases}\n            </h2>\n\n            {/* Total Cases */}\n            <Typography className=\"infoBox__total\" color=\"textSecondary\">\n                {total} Total\n            </Typography>\n        </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n    cases: {\n        hex: \"#D33E43\",\n        mulitiplier: 800,\n    },\n\n    recovered: {\n        hex: \"#7F9172\",\n        mulitiplier: 1200,\n    },\n\n    deaths: {\n        hex: \"#C0C0C0\",\n        mulitiplier: 2000,\n    },\n};\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n    sortedData.sort((a, b) => b.cases - a.cases);\n\n    return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n    //Draw circles on map\n    export const showDataOnMap = (data, casesType) => data.map((country) => (\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.4}\n            pathOptions={{\n                color: casesTypeColors[casesType].hex,\n                fillColor: casesTypeColors[casesType].hex,\n            }}\n            radius={\n                Math.sqrt(country[casesType] / 10) *\n                casesTypeColors[casesType].mulitiplier\n            }\n        >\n            <Popup>\n                <div className=\"info-container\">\n                    <div\n                        className=\"info-flag\"\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n                    />\n                    <div className=\"info-name\">{country.country}</div>\n                    <div className=\"info-confirmed\">\n                        Cases: {numeral(country.cases).format(\"0,0\")}\n                    </div>\n\n                    <div className=\"info-recovered\">\n                        Recovered: {numeral(country.recovered).format(\"0,0\")}\n                    </div>\n          \n                    <div className=\"info-deaths\">\n                        Deaths: {numeral(country.deaths).format(\"0,0\")}\n                    </div>\n                </div>\n            </Popup>\n        </Circle>\n    )\n);\n","import React from \"react\";\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\n\nimport { showDataOnMap } from \"./util\";\n\nimport \"./Map.css\";\n\n\nfunction Map({ countries, casesType, center, zoom }) {\n    \n    function ChangeView({ center, zoom }) {\n        const map = useMap();\n        map.setView(center, zoom);\n        return null;\n    }\n\n    return (\n        <MapContainer\n            casesType={casesType}\n            className=\"map\"\n            center={center}\n            zoom={zoom}\n            scrollWheelZoom={false}\n        >\n            <ChangeView center={center} zoom={zoom} />\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {showDataOnMap(countries, casesType)}\n        </MapContainer>\n    );\n}\n\nexport default Map;\n","import React from \"react\";\nimport numeral from \"numeral\";\n\nimport \"./Table.css\";\n\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n            {countries.map(({ country, cases }) => (\n                <tr>\n                    <td>{country}</td>\n                    <td>\n                        <strong>{numeral(cases).format(\"000,000\")}</strong>\n                    </td>\n                </tr>\n            ))}\n        </div>\n    );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n        {\n            type: \"time\",\n            time: {\n                format: \"MM/DD/YY\",\n                tooltipFormat: \"ll\",\n            },\n        },\n    ],\n    yAxes: [\n        {\n            gridLines: {\n                display: false,\n            },\n            ticks: {\n                // Include a dollar sign in the ticks\n                callback: function (value, index, values) {\n                    return numeral(value).format(\"0a\");\n                },\n            },\n        },\n        ],\n    },\n};\n\nconst buildChartData = (data, casesType) => {\n    let chartData = [];\n    let lastDataPoint;\n    \n    for (let date in data.cases) {\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint,\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n};\n\nfunction LineGraph({ casesType, ...props }) {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n                .then((response) => {\n                return response.json();\n            })\n                .then((data) => {\n                    let chartData = buildChartData(data, casesType);\n                    setData(chartData);\n                    console.log(chartData);\n                });\n        };\n\n        fetchData();\n    }, [casesType]);\n\n    return (\n        <div className={props.className}>\n            {data?.length > 0 && (\n            <Line\n                data={{\n                datasets: [\n                    {\n                        backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                        borderColor: \"#CC1034\",\n                        data: data,\n                    },\n                ],\n                }}\n                options={options}\n            />\n        )}\n        </div>\n    );\n}\n\nexport default LineGraph;\n","import React, { useEffect, useState } from \"react\";\nimport { MenuItem, FormControl, Select, CardContent, Card } from \"@material-ui/core\";\n\nimport InfoBox from \"./components/InfoBox\";\nimport Map from \"./components/Map\";\nimport Table from \"./components/Table\";\nimport { sortData, prettyPrintStat } from \"./components/util\";\nimport LineGraph from \"./components/LineGraph\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"./components/InfoBox.css\";\nimport \"./App.css\";\n\nfunction App() {\n    const [countries, setCountries] = useState([]);\n    const [country, setCountry] = useState(\"worldwide\");\n    const [countryInfo, setCountryInfo] = useState({});\n    const [tableData, setTableData] = useState([]);\n    const [mapCenter, setMapCenter] = useState([34.80746, -40.4796]);\n    const [zoom, setZoom] = useState(3);\n    const [mapCountries, setMapCountries] = useState([]);\n    const [casesType, setCasesType] = useState(\"cases\");\n    const [isLoading, setLoading] = useState(false);\n\n    useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n        .then((response) => response.json())\n        .then((data) => {\n        setCountryInfo(data);\n        });\n    }, []);\n\n    useEffect(() => {\n        const getCountriesData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/countries\")\n            .then((response) => response.json())\n            .then((data) => {\n                const countries = data.map((country) => ({\n                    name: country.country,\n                    value: country.countryInfo.iso2,\n                }));\n\n            const sortedData = sortData(data);\n            setTableData(sortedData);\n            setMapCountries(data);\n            setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n    }, []);\n\n    const onCountryChange = async (event) => {\n        setLoading(true);\n        const countryCode = event.target.value;\n\n        setCountry(countryCode);\n\n        const url = countryCode === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n        await fetch(url)\n            .then((response) => response.json())\n            .then((data) => {\n            setCountry(countryCode);\n            setCountryInfo(data);\n            setLoading(false);\n            countryCode === \"worldwide\" ? setMapCenter([34.80746, -40.4796]) : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n            setZoom(4);\n      });\n\n    // console.log(countryInfo);\n  };\n\n    return (\n        <div className=\"app\">\n            <div className=\"app__left\">\n                <div className=\"app__header\">\n                    <h1>COVID-19 Tracker</h1>\n                    <FormControl className=\"app__dropdown\">\n                        <Select\n                            variant=\"outlined\"\n                            onChange={onCountryChange}\n                            value={country}\n                        >\n                        <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                        {countries.map((country) => (\n                            <MenuItem value={country.value}>{country.name}</MenuItem>\n                        ))}\n                        </Select>\n                    </FormControl>\n                </div>\n\n                <div className=\"app__stats\">\n                    <InfoBox\n                        isRed\n                        active={casesType === \"cases\"}\n                        className=\"infoBox__cases\"\n                        onClick={(e) => setCasesType(\"cases\")}\n                        title=\"Coronavirus Cases\"\n                        total={prettyPrintStat(countryInfo.cases)}\n                        cases={prettyPrintStat(countryInfo.todayCases)}\n                        isloading={isLoading}\n                    />\n                    <InfoBox\n                        active={casesType === \"recovered\"}\n                        className=\"infoBox__recovered\"\n                        onClick={(e) => setCasesType(\"recovered\")}\n                        title=\"Recovered\"\n                        total={prettyPrintStat(countryInfo.recovered)}\n                        cases={prettyPrintStat(countryInfo.todayRecovered)}\n                        isloading={isLoading}\n                    />\n                    <InfoBox\n                        isGrey\n                        active={casesType === \"deaths\"}\n                        className=\"infoBox__deaths\"\n                        onClick={(e) => setCasesType(\"deaths\")}\n                        title=\"Deaths\"\n                        total={prettyPrintStat(countryInfo.deaths)}\n                        cases={prettyPrintStat(countryInfo.todayDeaths)}\n                        isloading={isLoading}\n                    />\n                </div>\n\n                <Map\n                    countries={mapCountries}\n                    center={mapCenter}\n                    zoom={zoom}\n                    casesType={casesType}\n                />\n            </div>\n            \n            <Card className=\"app__right\">\n                <CardContent>\n                    <h3>Live Cases by Country</h3>\n                    <Table countries={tableData} />\n                    <h3 className=\"app__graphTitle\">WorldWide new {casesType}</h3>\n                    <LineGraph className=\"app__graph\" casesType={casesType} />\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './components/reportWebVitals';\n\nReactDOM.render( <App />, document.getElementById('root'));\n\nreportWebVitals();\n"],"sourceRoot":""}